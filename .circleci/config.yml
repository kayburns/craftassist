version: 2.1
jobs:
  build:
    docker:
      - image: ubuntu:18.04
    steps:
      - run:
          name: Install dependencies
          command: |
            apt update
            apt install -y git python3 python3-pip apt-transport-https ca-certificates curl gnupg-agent software-properties-common
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
            apt-key fingerprint 0EBFCD88
            add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
            apt update
            apt install -y docker-ce docker-ce-cli containerd.io
      - checkout

      - run:
          name: Get branch env variable
          command: |
            echo 'export DOCKER_BUILD_ARGS="--build-arg current_branch=${CIRCLE_BRANCH}"' >> $BASH_ENV

      - run:
          name: Deploy Github key
          command: |
            echo ${MCDEPLOY_KEY_B64} | base64 -d > tools/docker/mcdeploy.key
            chmod 400 tools/docker/mcdeploy.key

      - run:
          name: Deploy AWS S3 access key
          command: |
            echo ${AWS_S3_ACCESS_KEY_ID} > tools/docker/AWS_S3_ACCESS_KEY_ID.txt
            echo ${AWS_S3_SECRET_ACCESS_KEY} > tools/docker/AWS_S3_SECRET_ACCESS_KEY.txt

      - setup_remote_docker
      - run:
          name: Build docker containers
          command: make -C tools/docker build

      - run:
          name: Python style checks (black and awscli)
          command: |
            pip3 install $(cat requirements.txt | grep -e black -e awscli)
            sh ./tools/codetools/check_and_fix_black_failures.sh --ci

      - run:
          name: Python unit tests
          command: |
              mkdir shared
              docker run --name mc-tests -v $(pwd):/shared -w /shared --entrypoint=/droidlet/craftassist/test.sh craftassist
              docker cp mc-tests:/shared shared
              pip3 install codecov
              CODECOV_TOKEN="318c7f7e-54eb-4692-8651-8ea48857c3a7"
              bash <(curl -s https://codecov.io/bash) -t $CODECOV_TOKEN -s "shared" -f 'test*.xml' -n "locobot tests"|| echo "Codecov did not collect coverage reports"

      - run:
          name: Push versioned docker containers
          command: |
            tools/docker/login.sh
            make -C tools/docker push-versioned

  locobot_tests:
    machine:
      image: ubuntu-1604:201903-01
    resource_class: gpu.small
    steps:
    - checkout
    - run:
        name: Setup environment
        command: |
          set -ex

          curl -L https://packagecloud.io/circleci/trusty/gpgkey | sudo apt-key add -
          curl -L https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -

          sudo apt-get update

          sudo apt-get install \
              apt-transport-https \
              ca-certificates \
              curl \
              gnupg-agent \
              software-properties-common

          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -

          sudo add-apt-repository \
             "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
             $(lsb_release -cs) \
             stable"

          sudo apt-get update
          export DOCKER_VERSION="5:19.03.2~3-0~ubuntu-xenial"
          sudo apt-get install docker-ce=${DOCKER_VERSION} docker-ce-cli=${DOCKER_VERSION} containerd.io=1.2.6-3

          # Add the package repositories
          distribution=$(. /etc/os-release;echo $ID$VERSION_ID)
          curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | sudo apt-key add -
          curl -s -L https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker.list | sudo tee /etc/apt/sources.list.d/nvidia-docker.list

          export NVIDIA_CONTAINER_VERSION="1.0.3-1"
          sudo apt-get update && sudo apt-get install -y nvidia-container-toolkit=${NVIDIA_CONTAINER_VERSION}
          sudo systemctl restart docker

          DRIVER_FN="NVIDIA-Linux-x86_64-440.59.run"
          wget "https://s3.amazonaws.com/ossci-linux/nvidia_driver/$DRIVER_FN"
          sudo /bin/bash "$DRIVER_FN" -s --no-drm || (sudo cat /var/log/nvidia-installer.log && false)
          nvidia-smi

    - run:
        name: Pull docker image
        command: |
          set -ex
          export DOCKER_IMAGE=theh1ghwayman/locobot-assistant:5.0
          echo Pulling docker image $DOCKER_IMAGE
          docker pull $DOCKER_IMAGE >/dev/null

    - run:
        name: Build and run tests
        command: |
          set -ex

          cd ${HOME}/project/
          export DOCKER_IMAGE=theh1ghwayman/locobot-assistant:5.0
          mkdir shared
          docker run --gpus all --name loco-img --ipc=host -v $(pwd):/shared -w /shared ${DOCKER_IMAGE} .circleci/locobot_tests.sh
          docker cp loco-img:/shared shared
          pip install codecov
          CODECOV_TOKEN="318c7f7e-54eb-4692-8651-8ea48857c3a7"
          bash <(curl -s https://codecov.io/bash) -t $CODECOV_TOKEN -s "shared" -f 'test*.xml' -n "locobot tests"|| echo "Codecov did not collect coverage reports"


workflows:
  build:
    jobs:
      - build
      - locobot_tests
